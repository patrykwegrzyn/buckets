import{EventEmitter as d}from"events";import{open as y}from"lmdbx";var p=class extends d{constructor(e,s){super();this.dbs=new Map;this.flushing=!1;this.indexes=new Map;this.env=y(e,s),this.ttlBucket=this.env.openDB("ttl",{cache:!0}),this.indexDb=this.env.openDB("index",{cache:!0})}ttlKey(e,s,t){return`${e}:${s}:${t}`}wrapDB(e,s){let t=this,o=Object.create(e);return o.query=async function(n,i){console.log("query",n,i);let r=[],a=t.indexKey(s,n,i);for(let{key:c,value:u}of t.indexDb.getRange({start:a,end:`${a}\xFF`}))console.log({key:c,value:u}),r.push(u);return(await e.getMany(r)).filter(c=>c!==void 0)},o.put=function(n,i,r){let a;if(r&&r.version!==void 0&&r.ifVersion!==void 0?a=e.put(n,i,r.version,r.ifVersion):r&&r.version!==void 0?a=e.put(n,i,r.version):a=e.put(n,i),r?.ttl){let c=Date.now()+r.ttl,u=t.ttlKey(c,s,String(n));t.ttlBucket.put(u,"")}let l=t.indexes.get(s);if(l)for(let c of l){let u=i[c],f=t.indexKey(s,c,u,n);t.indexDb.put(f,String(n))}return r?.quiet||t.emit("change",{op:"put",bucket:s,id:n,value:e.encoder.encode(i),version:r?.version,ttl:r?.ttl}),a},o.remove=function(n,i){let r=t.indexes.get(s);if(r){let a=e.get(n);for(let l of r){let c=a[l],u=t.indexKey(s,l,c,n);t.indexDb.remove(u)}}if(!i?.quiet){let a=e.get(n);t.emit("change",{op:"remove",bucket:s,id:n,value:a,version:i?.ifVersion})}return i?.ifVersion!==void 0?e.remove(n,i.ifVersion):e.remove(n)},o}indexKey(e,s,t,o=""){return`${e}:${s}:${t}:${o}`}bucket(e,s){let t=this.dbs.get(e);if(!t){let o={cache:!0,...s},n=this.env.openDB(e,o);t=this.wrapDB(n,e),s?.indexes&&this.indexes.set(e,s.indexes),this.dbs.set(e,t)}return t}async clean(){if(this.flushing)return;this.flushing=!0;let e=[],s=Date.now().toString();for(let t of this.ttlBucket.getKeys({end:s})){let o=t.split(":");if(o.length<3)continue;let n=o[1],i=o.slice(2).join(":");e.push({ttlKey:t,bucketName:n,id:i})}await this.env.transaction(()=>{for(let{ttlKey:t,bucketName:o,id:n}of e)this.bucket(o).remove(n,{quiet:!0}),this.ttlBucket.remove(t)}),this.flushing=!1}async close(){let e=Array.from(this.dbs.values()).map(s=>s.close());await Promise.all([...e,this.env.close(),this.ttlBucket.close()])}};export{p as Store};
//# sourceMappingURL=index.mjs.map
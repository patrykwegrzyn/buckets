import{EventEmitter as h}from"events";import{open as g}from"lmdbx";var f=class extends h{constructor(e,o){super();this.flushing=!1;this.dbs=new Map,this.env=g(e,o),this.ttlBucket=this.env.openDB("ttl",{cache:!0})}ttlKey(e,o,t){return`${e}:${o}:${t}`}_patch(e,o){let t=e.put.bind(e),i=e.remove.bind(e),u=this;e.put=(s,n,r,c)=>{let a={},l=!1;typeof r=="number"?a.version=r:typeof r=="object"&&r!==null&&(a=r,l=!!r.quiet);let b=t(s,n,a.version,c);if(a.ttl){let p=Date.now()+a.ttl,y=u.ttlKey(p,o,String(s));u.ttlBucket.put(y,"")}return l||u.emit("change",{op:"put",bucket:o,id:s,value:e.encoder.encode(n),version:a.version,ttl:a.ttl}),b},e.remove=async(s,n)=>{let r=!1,c;if(typeof n=="number"?c=n:typeof n=="object"&&n!==null&&(r=!!n.quiet,c=n.ifVersion),!r){let a=e.get(s);u.emit("change",{op:"remove",bucket:o,id:s,value:a,version:c})}return typeof n=="object"&&n!==null&&n.quiet?i(s,c):i(s,n)}}bucket(e,o){let t=this.dbs.get(e);if(!t){let i={cache:!0,...o};t=this.env.openDB(e,i),this.dbs.set(e,t),this._patch(t,e)}return t}async clean(){if(this.flushing)return;this.flushing=!0;let e=[],o=Date.now().toString();for(let t of this.ttlBucket.getKeys({end:o})){let i=t.split(":");if(i.length<3)continue;let u=i[1],s=i.slice(2).join(":");e.push({ttlKey:t,bucketName:u,id:s})}await this.env.transaction(()=>{for(let{ttlKey:t,bucketName:i,id:u}of e)this.bucket(i).remove(u,{quiet:!0}),this.ttlBucket.remove(t)}),this.flushing=!1}};export{f as Store};
//# sourceMappingURL=index.mjs.map